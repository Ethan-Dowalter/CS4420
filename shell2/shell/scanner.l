%{
/**
 *        @file: scanner.l
 *      @author: Ethan Dowalter
 *        @date: October 20, 2021
 *       @brief: Flex lexical analyzer for my bash shell
 */

/*
 * Simple example lex input file
 *
 * Shawn Ostermann -- Sept 9, 2021
 *
 * Headstart version
 */

#include <string.h>
#include <ctype.h>
#include "parser.h"

/* some internal files generated by bison */
void yyerror(const char *s,...);
void yywarn(const char *s,...);


/* Everything up to the funny characters on the next line */
/* goes directly into the lex.yy.c file */
%}

/* shorthand definitions for later */
DIGIT		[0123456789]
LETTER		[a-zA-Z]
OTHERCHARS	[^\n|<>"' \t;]
WHITESPACE	[ \t]
/* WEIRD BUG DO NOT USE!!! MESSES WITH INPUT CHAR DETECTION OF LESS THAN CHAR??? */
/* OTHERCHARS	[!@#$%^&*()_+-=\[\]{}\\;:',./?`~] */

/* The rest of this after the '%%' is lex rules */
%%

{WHITESPACE}+	{ }  /* Just ignore white space */

"\n" 	        { return(EOLN); }
";"             { return(SEMICOLON); }
"|"             { return(PIPE); }
"<"             { return(INPUT); }
">"             { return(OUTPUT); }
">>"            { return(OUTPUT_APPEND); }
"2>"            { return(ERROUT); }
"2>>"           { return(ERROUT_APPEND); }
"for"           { return(FOR); }
"while"         { return(WHILE); }
"in"            { return(IN); }
"done"          { return(DONE); }
"do"            { return(DO); }
"cd"            { return(CD); }
"export"        { return(EXPORT); }

[a-zA-Z][a-zA-Z0-9_]*=([0-9]+|[a-zA-Z0-9_/:.]+|\'[^'\n]*\')? {
    yylval.string = strdup(yytext);
    /* printf("I got a VAR : %s\n", yylval.string); */
    return(VAR);
}

[a-zA-Z][a-zA-Z0-9_]*=(\"[^"\n]*\"|$[a-zA-Z][a-zA-Z0-9_]*|$[{][a-zA-Z][a-zA-Z0-9_]*([#%][#%]?[a-zA-Z][a-zA-Z0-9_]*)?[}]) {
    yylval.string = strdup(yytext);
    /* printf("I got a VAREXPAND : %s\n", yylval.string); */
    return(VAREXPAND);
}

({DIGIT}|{LETTER}|{OTHERCHARS})+ {
    yylval.string = strdup(yytext);  /* make a copy of the string */
    /* printf("Hello, I just saw this: %s\n", yylval.string); */
    return(WORD);
}

\"[^"\n]*\"|\'[^'\n]*\' {
    /* yytext[strlen(yytext) - 1] = 0; */
    yylval.string = strdup(yytext);  /* make a copy of the string */
	/* printf("String: %s\n", yylval.string); */
    return(WORD);
}

.		{
    /* if we haven't matched anything yet, then it's illegal */
    yyerror("scanner: Bad character '%c'", *yytext);
}


%%
